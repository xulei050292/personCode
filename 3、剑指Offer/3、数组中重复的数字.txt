3.1  P39

	public static boolean duplicate(int[] testArray,int length) {
			
			if(testArray.length <= 0 || length <= 0) {
				return false;
			}
			for(int i = 0; i < length; i++) {
				if(testArray[i] < 0 || testArray[i] > length - 1) {
					return false;
				}
			}
			
			for(int i = 0; i < length; i++) {
				while(testArray[i] != i ) {
					if(testArray[testArray[i]] == testArray[i] ) {
						System.out.println(testArray[i]);
						return true;
					}
					int temp = testArray[testArray[i]];
					testArray[testArray[i]] = testArray[i];
					testArray[i] = temp;
				}
			}
			return false;
		}
		
		
3.2 P41

	public static int countRange(int[] testArray,int length,int start,int middle) {
		int count = 0;
		for(int i = 0; i < length; i++) {
			if(testArray[i] >= start && testArray[i] <= middle) {
				count++;
			}
		}
		return count;
	}
	
	public static boolean getDuplicate(int[] testArray,int length) {
		
		if(length <= 0) {
			return false;
		}
		for(int i = 0; i < length; i++) {
			if(testArray[i] < 0 || testArray[i] > length - 1) {
				return false;
			}
		}
		
		int start = 1;
		int end   = length - 1;
		while(start <= end) {
			int middle = (start + end) / 2;
			int count  = JavaTest.countRange(testArray,length,start,middle);
			if(end == start) {
				if(count > 1) {
					System.out.println(start);
					return true;
				}else {
					break;
				}
			}
			if(count > (middle - start + 1)) {
				end = middle;
			}else {
				start = middle;
			}
		}
		return false;
	}		
		