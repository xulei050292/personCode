 public Node first; // 定义一个头结点  
     private int pos = 0;// 节点的位置  
  
     public LinkList() {  
           this. first = null;  
     }  
  
     // 插入一个头节点  
     public void addFirstNode( int data) {  
          Node node = new Node(data);  
          node. next = first;  
           first = node;  
     }  

	 
	 
package com.bjfu.linkList;

public class LinkList {
	public Node first;
	private int position = 0;
	
	public LinkList() {
		this.first = null;
	}
	
	// 插入一个节点
	public void addFirstNode(int data) {
		Node node = new Node(data);
		node.next = first;
		first = node;
	}
	
	// 删除一个头结点,并返回头结点 
	public Node deleteFirstNode() {
		Node tempNode = first;
		first = tempNode.next;
		return tempNode;
	}
	
	// 在任意位置插入节点 在index的后面插入 
	public void add(int index ,int data) {
		Node node = new Node(data);
		Node current = first;
		Node previous = first;
		while(position != index) {
			previous = current;
			current = current.next;
			position++;
		}
		node.next = current;
		previous.next = node;
		position = 0;
	}
	
	 // 删除任意位置的节点  
    public Node deleteByPos( int index) {  
         Node current = first;  
         Node previous = first;  
         while ( position != index && current != null) {  
             position++;  
             previous = current;  
             current = current. next;  
         }  
         //特殊情况：只有头节点 
         if(current != null) {
        	 if(current == first) {  
                 first = first. next;  
            }else {  
                position = 0;  
                previous. next = current. next;  
            }  
         }else {
        	 System.out.println("下标越界");
         }
          return current;  
    }
    
    // 根据节点的data删除节点(仅仅删除第一个)  
    public Node deleteByData( int data) {  
         Node current = first;  
         Node previous = first;   
         while (current. data != data) { 
        	 if (current. next == null) {
        		 System.out.println("当前链表中不存在此数据");
        		 return null;
        	 }   
             previous = current;  
             current = current. next;  
         }  
         if(current == first) {  
              first = first. next;  
         } else {  
             previous. next = current. next;  
         }  
          return current;  
    }
    
    //显示所有节点信息
    public void showAllNodeInfo() {
    	Node current = first;
    	while(current != null) {
    		current.show();
    		current = current.next;
    	}
    	System.out.println("结束");
    }
    
    // 根据位置查找节点信息  
    public Node findByPos( int index) {  
         Node current = first;  
          if ( position != index) {  
              current = current. next;  
              position++;  
         }  
          return current;
    }  
 
    // 根据数据查找节点信息  
    public Node findByData( int data) {  
         Node current = first;  
          while (current. data != data) {  
              if (current. next == null) {
            	  return null;
              }  
             current = current. next;  
         }  
          return current;  
    }  
}



package com.bjfu.linkList;

public class TestLinkList {

	public static void main(String[] args) {
		 LinkList linkList = new LinkList();  
         linkList.addFirstNode(20);  
         linkList.addFirstNode(21);  
         linkList.addFirstNode(19);   /19 21 20 
         
         linkList.showAllNodeInfo();

	}

}



