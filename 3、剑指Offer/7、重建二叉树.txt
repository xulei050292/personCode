package com.bjfu.Tree;

public class BinaryTreeNode {
	public int value;
	public BinaryTreeNode leftNode;
	public BinaryTreeNode rightNode;
	
	public BinaryTreeNode() {
		
	}
	
	public BinaryTreeNode(int value) {
		this.value = value;
		this.leftNode = null;
		this.rightNode = null;
	}
}




package com.bjfu.Tree;

public class E07ConstructBinaryTree {

	public static void printPreOrder(BinaryTreeNode root) {
		if(root == null) {
			return ;
		}else {
			System.out.println(root.value + " ");
		}
		
		if(root.leftNode != null) {
			printPreOrder(root.leftNode);
		}
		if(root.rightNode != null) {
			printPreOrder(root.rightNode);
		}
	}

    /**  
     * @param PreOrder       前序遍历序列  
     * @param startPreIndex  前序序列开始位置  
     * @param endPreIndex    前序序列结束位置  
     * 
     * @param InOrder        中序遍历序列  
     * @param startInIndex   中序序列开始位置  
     * @param endInIndex     中序序列结束位置  
     * 
     * @return 根结点  
     * @throws Exception  
     */  
	public static BinaryTreeNode ConstructCore(int[] preOrder,int startPreIndex, int endPreIndex,   
            int[] inOrder,int startInIndex, int endInIndex) throws Exception {
		
		int rootValue = preOrder[startPreIndex];
		BinaryTreeNode root = new BinaryTreeNode(rootValue);
		
		//递归函数的终止条件:只有一个元素
		if(startPreIndex == endPreIndex) {
			if(startInIndex == endInIndex && preOrder[startPreIndex] == inOrder[startInIndex]) {
				System.out.println("only one element");
				return root;
			}else {
				throw new Exception();
			}
		}
		
		//在中序遍历中找到根节点的index
		int rootInIndex = startInIndex;
		while(rootInIndex < endInIndex && inOrder[rootInIndex] != rootValue) {
			++rootInIndex;
		}
		//输入的前序和后序不匹配
		if(rootInIndex == endInIndex && inOrder[rootInIndex] != rootValue) {
			throw new Exception("输入数据非法");
		}
		
		int leftLength = rootInIndex - startInIndex;
		int leftPreOrderEndIndex = startPreIndex + leftLength;
		
		if(leftLength > 0) {
			root.leftNode = ConstructCore(preOrder, startPreIndex + 1, leftPreOrderEndIndex, inOrder, startInIndex, rootInIndex - 1);
		}
		
		if(leftLength < endPreIndex - startPreIndex) {
			root.rightNode = ConstructCore(preOrder,leftPreOrderEndIndex + 1,endPreIndex,inOrder,rootInIndex + 1,endInIndex);
		}
		return root;
	}
	
	
	public static BinaryTreeNode Construct(int[] preOrder, int[] inOrder,int length ) {
		if(preOrder == null || inOrder == null || length <= 0) {
			System.out.println("输入参数为空！");
			return null;
		}
		try{
			return ConstructCore(preOrder,0,preOrder.length - 1,inOrder,0,inOrder.length - 1);
			
		}catch(Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public static void main(String[] args) {
		
		E07ConstructBinaryTree testTree = new E07ConstructBinaryTree();
		int[] preOrder = {1,2,4,7,3,5,6,8};
		int[] inOrder  = {4,7,2,1,5,3,8,6};
		BinaryTreeNode rootNode = Construct(preOrder,inOrder,preOrder.length);
		
		printPreOrder(rootNode);

	}

}





