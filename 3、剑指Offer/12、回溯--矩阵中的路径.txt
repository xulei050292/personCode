	package javaTest;

	import java.util.Scanner;

	public class JavaTest {

	 /**
     * 回溯搜索算法
     *
     * @param matrix     输入矩阵
     * @param rows       矩阵行数
     * @param cols       矩阵列数
     * @param str        要搜索的字符串
     * @param visited    访问标记数组
     * @param row        当前处理的行号
     * @param col        当前处理的列号
     * @param pathLength 已经处理的str中字符个数
     * @return 是否找到  true是，false否
     */
	public static boolean hasPathCore(char[] matrix,int rows,int cols,char[] str,boolean[] visited,int row,int col,int pathLength) {
		//终止条件：需要寻找的字符串已经全部找完了
		if(pathLength == str.length) {
			return true;
		}
		
		boolean hasPath = false;
		
		//判断位置是否合法
		int position = row * cols + col;
		if(row >= 0 && row < rows && col >= 0 && col < cols && matrix[position] == str[pathLength] && !visited[position]) {
			visited[position] = true;
			pathLength++;
			
			//按照 左->上->右->下 的顺序进行回溯
			hasPath =  hasPathCore(matrix, rows, cols, str, visited, row, col - 1, pathLength)
					|| hasPathCore(matrix, rows, cols, str, visited, row - 1, col, pathLength)
					|| hasPathCore(matrix, rows, cols, str, visited, row, col + 1, pathLength)
					|| hasPathCore(matrix, rows, cols, str, visited, row + 1, col, pathLength);
			
			if(!hasPath) {
				pathLength--;
				visited[position] = false;
			}
		}
		
		return hasPath;
	}
	/**
     * 题目：请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
     * 路径可以从矩阵中任意一格开始，每一步可以在矩阵中间向左、右、上、下移动一格。
     * 如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。
     *
     * @param matrix 输入矩阵
     * @param rows   矩阵行数
     * @param cols   矩阵列数
     * @param str    要搜索的字符串
     * @return 是否找到 true是，false否
     */
	public static boolean hasPath(char[] matrix,int rows,int cols,char[] str) {
		//校验参数
		if(matrix == null || matrix.length != rows * cols || rows <= 0 || cols <= 0 || str == null || str.length < 1) {
			System.out.println("参数错误");
			return false;
		}
		//变量初始化
		boolean[] visited = new boolean[rows * cols];//初始化默认值是false；
		
		//记录当前已经匹配的字符个数
		int pathLength = 0;
		
		//以每一个点为起点进行搜索
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				if(hasPathCore(matrix,rows,cols,str,visited,i,j,pathLength)) {
					return true;
				}
			}
		}
		return false;
	}
	
	
	public static void main(String[] args) {
		String inputMatrix = "abtgcfcsjdeh";
		int row = 3;
		int column = 4;
		char[] matrix = new char[inputMatrix.length()];
		matrix = inputMatrix.toCharArray();
		
		System.out.println("请输入要查询的字符串：");  
		Scanner scanner = new Scanner(System.in);
        String inputstr = scanner.nextLine();  
        char[] findStr = new char[inputstr.length()];
        findStr = inputstr.toCharArray();
        
		boolean bool = JavaTest.hasPath(matrix,row,column,findStr);
		System.out.println(bool);
		
	}
}