题目：
	53. Maximum Subarray   求最大和子数组

	Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

	For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
	the contiguous subarray [4,-1,2,1] has the largest sum = 6.
	
	分析：
	（1）、最大和子数组的第一个元素肯定是正数
	（2）、（因为数组中有正数和负数）所以子数组的最大和肯定是正数
	
	最简洁代码：时间复杂度O(n)
	public static int maxSubArray(int[] nums) {
		int len = nums.length;
		int maxSum = 0,curSum = 0;
		for (int i = 0; i < len; i++) {
			curSum += nums[i];
			if (curSum > maxSum) {
				maxSum = curSum;
			}
			if (curSum < 0) {
				curSum = 0;
			}
		}
		return maxSum;   
    }
	还有两种方式：暴力法   分治法
	http://blog.csdn.net/ns_code/article/details/20942045
	
	
	但是，Leetcode上没说一定同时有正数和负数。。。。。。。。。。。尴尬了
	测试case1：  int[] nums = {-2,1,-3,4,-1,2,1,-5,4};  能测试通过
	测试case2：  int[] nums = {-2,-3,-1,-5}; 以上代码就测试不通过了。。。。。。。
	 
	 修改代码如下：
	 public int maxSubArray(int[] nums) {
        int len = nums.length;
		int maxSum = Integer.MIN_VALUE,curSum = 0;
		
		for (int i = 0; i < len; i++) {
			curSum = curSum + nums[i] > nums[i] ? curSum + nums[i] : nums[i];//修改的地方，用于全是负数的时候
			if (curSum > maxSum) {
				maxSum = curSum;
			}
		}
		return maxSum;  
    }
	