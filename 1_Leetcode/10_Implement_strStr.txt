题目：
	 
	Implement strStr().
	Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
	返回字符串中子串的位置。
	
	自己的代码：
	public class Solution {
		public int strStr(String haystack, String needle) {
		
			if (needle.length() > haystack.length()) {
				return -1;
			 }else if (needle.length() == 0 &&  haystack.length() == 0) {
				return 0;
			 } 
			 
			 int len1 = haystack.length();
			 int len2 = needle.length();
			 boolean flag = true;
			 for (int i = 0; i < len1 - len2 + 1; i++) {
				int m = i;
				for (int n = 0; n < len2; n++) {
					if (haystack.charAt(m) != needle.charAt(n)) {
						flag = false;
						break;
					}else {
						m++;
						flag = true;
					}
				}
				if (flag) {
					return i;
				}
			 }	 
			return -1;
		}
	}
	
	代码优化1：
	public class Solution {
		public int strStr(String haystack, String needle) {
		
			if (needle.length() > haystack.length()) {
				return -1;
			 }else if (needle.length() == 0 &&  haystack.length() == 0) {
				return 0;
			 } 
			 
			 int len1 = haystack.length();
			 int len2 = needle.length();
			 
			 for (int i = 0; i <= len1 - len2; i++) {
				if(haystack.substring(i,i + len2).equals(needle)) {
					return i;
				}
			 }	 
			return -1;
		}
	}
	
	
	代码优化2：需要一些逻辑思考
	public int strStr(String haystack, String needle) {
	  for (int i = 0; ; i++) {
		for (int j = 0; ; j++) {
		  if (j == needle.length()) return i;
		  if (i + j == haystack.length()) return -1;
		  if (needle.charAt(j) != haystack.charAt(i + j)) break;
		}
	  }
	}
	