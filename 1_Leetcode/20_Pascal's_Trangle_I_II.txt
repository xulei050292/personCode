题目：
	118. Pascal's Triangle
	
	Given numRows, generate the first numRows of Pascal's triangle.

	For example, given numRows = 5,
	Return

	[
		 [1],
		[1,1],
	   [1,2,1],
	  [1,3,3,1],
	 [1,4,6,4,1]
	]
	
   自己的解法：
	public class Solution {
		public List<List<Integer>> generate(int numRows) {
			List<List<Integer>> doubleList = new ArrayList<List<Integer>>();
			for(int i = 0; i < numRows; i++) {
				List<Integer> inList =new ArrayList<Integer>();
				if(i == 0){
					inList.add(1);
					doubleList.add(inList);
		
				}else if(i == 1) {
					inList.add(1);
					inList.add(1);
					doubleList.add(inList);
					
				}else {
					List<Integer> tempList = doubleList.get(i - 1);
					inList.add(1);
					for (int j = 0; j < tempList.size() - 1; j++) {
						inList.add(j + 1, tempList.get(j) + tempList.get(j + 1));	
					}
					inList.add(1);
					doubleList.add(inList);
				}
			}
			return doubleList;
		}
	}
	
	简洁的代码：
		规律：calculate element value: K(i)(j)=K(i-1)(j-1)+K(i-1)(j) except for the first and last element
		
		public class Solution {
			public List<List<Integer>> generate(int numRows) {
				List<List<Integer>> triangle = new ArrayList<List<Integer>>();
				if (numRows <=0){
					return triangle;
				}
				for (int i=0; i<numRows; i++){
					List<Integer> row =  new ArrayList<Integer>();
					for (int j=0; j<i+1; j++){
						if (j==0 || j==i){   //内层数组中的第一个和最后一个都是1
							row.add(1);
						} else {
							row.add(triangle.get(i-1).get(j-1)+triangle.get(i-1).get(j));
						}
					}
					triangle.add(row);
				}
				return triangle;
			}
		}
		
		
	119. Pascal's Triangle II

		Given an index k, return the kth row of the Pascal's triangle.（注意下标识从0开始的）

		For example, given k = 3,
		Return [1,3,3,1].

		Could you optimize your algorithm to use only O(k) extra space?（也就说只能申请一个list）
		
		public class Solution {
			public List<Integer> getRow(int rowIndex) {
				List<Integer> list = new ArrayList<Integer>();
				if(rowIndex < 0) {
					return list;
				}
				
				for(int i = 0; i <= rowIndex; i++) {
					list.add(0,1);
					for(int j = 1; j < list.size() - 1;j++) {
						list.set(j,list.get(j) + list.get(j + 1));    //重新赋值使用set  -->空间负责都就是O(K)
					}
				}
				return list;
			}
		}
		
// Collection中定义的API
boolean             add(E object)
boolean             isEmpty()
boolean             remove(Object object)
int                 size()

boolean             addAll(Collection<? extends E> collection)
void                clear()
boolean             contains(Object object)
boolean             containsAll(Collection<?> collection)
boolean             equals(Object object)
Iterator<E>         iterator()
boolean             removeAll(Collection<?> collection)
boolean             retainAll(Collection<?> collection)
<T> T[]             toArray(T[] array)
Object[]            toArray()

// AbstractCollection中定义的API
void                add(int location, E object)
E                   get(int location)
E                   remove(int location)
E                   set(int location, E object)

boolean             addAll(int location, Collection<? extends E> collection)
int                 indexOf(Object object)
int                 lastIndexOf(Object object)
ListIterator<E>     listIterator(int location)
ListIterator<E>     listIterator()
List<E>             subList(int start, int end)


// ArrayList新增的API
Object               clone()
void                 ensureCapacity(int minimumCapacity)
void                 trimToSize()
void                 removeRange(int fromIndex, int toIndex)		
		
		
		
		
		
		
		