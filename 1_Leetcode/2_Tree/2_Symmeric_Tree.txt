题目：

101. Symmetric Tree

	Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
	For example, this binary tree [1,2,2,3,4,4,3] is symmetric（均称的）:

		1
	   / \
	  2   2
	 / \ / \
	3  4 4  3
	But the following [1,2,2,null,3,null,3] is not:
		1
	   / \
	  2   2
	   \   \
	   3    3
	   
	分析思路：
		判断对称，其实思路很简单，就是判断两种情况：
		对比情况一：左.左  vs  右.右
		对比情况二：左.右  vs  右.左
		
	代码：
	/**
	 * Definition for a binary tree node.
	 * public class TreeNode {
	 *     int val;
	 *     TreeNode left;
	 *     TreeNode right;
	 *     TreeNode(int x) { val = x; }
	 * }
	 */
	 
	（1）递归方式 
	public class Solution {
		public boolean isSymmetric(TreeNode root) {
			return root == null || isSymmetricHelp(root.left,root.right);  //分成左右两个子树，一一进行对比
		}
		
		private boolean isSymmetricHelp(TreeNode left,TreeNode right) {
			if(left == null || right == null) {
				return left == right;
			}
			if(left.val != right.val) {
				return false;
			}
			return isSymmetricHelp(left.left,right.right) && isSymmetricHelp(left.right,right.left);
		}
	}
	
	（2）非递归方式
	public class Solution {
		public boolean isSymmetric(TreeNode root) {
			if(root == null) {
				return true;
			}
			Stack<TreeNode> stack  = new Stack<TreeNode>();
			TreeNode left,right;
			if(root.left != null) {
				if(root.right == null) {
					return false;
				}
				stack.push(root.left);
				stack.push(root.right);
			}else if(root.right != null){
				return false;
			}
			
			while(!stack.empty()) {
				if(stack.size() % 2 != 0) {   //小技巧，可以提前终止程序，如果对称，必定是偶数（去除根节点）
					return false;
				}
				left = stack.pop();
				right = stack.pop();
				if(left.val != right.val) {
					return false;
				}
				if(left.left != null) {       //对比情况一：左.左  vs  右.右
					if(right.right == null) {
						return false;
					}
					stack.push(left.left);
					stack.push(right.right);
				}else if(right.right != null) {
					return false;
				}
				
				if(left.right != null) {     //对比情况二：左.右  vs  右.左
					if(right.left == null) {
						return false;
					}
					stack.push(left.right);
					stack.push(right.left);
				}else if(right.left != null) {
					return false;
				}
			}
			return true;
		}
	}
	
	
	
	
	
	
	