题目：
	112. Path Sum

	Given a binary tree and a sum, determine if the tree has a root-to-leaf path 
	such that adding up all the values along the path equals the given sum.

	For example:
	Given the below binary tree and sum = 22,
				  5
				 / \
				4   8
			   /   / \
			  11  13  4
			 /  \      \
			7    2      1
	return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

    递归方式：这个代码写的很好
		public class Solution {
			public boolean hasPathSum(TreeNode root, int sum) {
				if(root == null) {
					return false;
				}else if(root.left == null && root.right == null && root.val == sum){
					return true;
				}else {
					return hasPathSum(root.left,sum - root.val) || hasPathSum(root.right,sum - root.val); 
				}
			}
		}
		
	遍历实现方式：	http://www.cnblogs.com/ganganloveu/p/4131017.html
	  解题思路：
		In the postorder traversal, the node will be removed from the stack only when the right sub-tree has been visited.so the path will be stored in the stack. we can keep check the SUM, the length from root to leaf node.
        at leaf node, if SUM == sum, OK, return true. After postorder traversal, return false.
		
		public class Solution {
			public boolean hasPathSum(TreeNode root, int sum) {
				
				Stack<TreeNode> stack = new Stack<TreeNode>();
				TreeNode curNode = root;
				TreeNode preNode = null;
				int SUM = 0;
				
				while(curNode != null || !stack.empty()) {
					while(curNode != null) {
						stack.push(curNode);
						SUM += curNode.val;
						curNode = curNode.left;
					}
					curNode = stack.peek();
					if(curNode.left == null && curNode.right == null && SUM == sum) {
						return true;
					}
					if(curNode.right != null && preNode != curNode.right) {
						curNode = curNode.right;
					}else {
						preNode = curNode;
						stack.pop();
						SUM -= curNode.val;
						curNode = null;
					}
				}
			  return false;
			}
		}