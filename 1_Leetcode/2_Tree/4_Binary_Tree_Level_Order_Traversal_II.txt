题目：
	107. Binary Tree Level Order Traversal II

	Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
		(ie, from left to right, level by level from leaf to root).

	For example:
	Given binary tree [3,9,20,null,null,15,7],
		3
	   / \
	  9  20
		/  \
	   15   7
	   
	return its bottom-up level order traversal as:
	[
	  [15,7],
	  [9,20],
	  [3]
	]
	
	思路：这一题和上一题（104. Maximum Depth of Binary Tree）极其相似，只是把数据取出来存到数组中处理一下而已。
	  广度搜索（BFS）
		public class Solution {
			public List<List<Integer>> levelOrderBottom(TreeNode root) {
				Queue<TreeNode> queue = new LinkedList<TreeNode>();
				List<List<Integer>> result = new LinkedList<List<Integer>>();
				
				if (root == null) {
					return result;
				}
				queue.offer(root);
				while(!queue.isEmpty()) {
					int size = queue.size();
					List<Integer> subList= new LinkedList<Integer>(); //不同之处1
					while (size-- > 0) {
						TreeNode node = queue.poll();
						
						subList.add(node.val);                        //不同之处2
						
						if(node.left != null) {
							queue.offer(node.left);
						}
						if(node.right != null) {
							queue.offer(node.right);
						}
					}
					//把内层数组，放入到外层数组中。（java中list数组，可以指定从最前面或者最后面add数据）
					result.add(0, subList);                         
				}
				return result;
			}
		}