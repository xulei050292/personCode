题目：
	104. Maximum Depth of Binary Tree

	Given a binary tree, find its maximum depth.
	The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
	
	/**
	 * Definition for a binary tree node.
	 * public class TreeNode {
	 *     int val;
	 *     TreeNode left;
	 *     TreeNode right;
	 *     TreeNode(int x) { val = x; }
	 * }
	 */
	 
	 
	1、递归方式
	public class Solution {
		public int maxDepth(TreeNode root) {
			if(root == null) {
				return 0;     
			}
			int depth1 = maxDepth(root.left);
			int depth2 = maxDepth(root.right);
			
			return depth1 > depth2 ? depth1 + 1 : depth2 + 1;   //需要理解此处为什么 + 1。
		}
	}
	
	2、非递归方式：BFS：广度优先搜索、DFS：深度优先搜索
	
		2.1 DFS：深度优先搜索
			public class Solution {
				public int maxDepth(TreeNode root) {
					if(root == null) {
						return 0;
					}
					Stack<TreeNode> stack = new Stack<>();   //记录节点的栈
					Stack<Integer> value = new Stack<>();    //记录此节点对应的深度值的栈
					stack.push(root);
					value.push(1);
					int max = 0;
					
					while(!stack.empty()) {
						//每次先把节点和其对应的深度从栈中弹出
						TreeNode node = stack.pop();
						int temp = value.pop();
						
						//求当前的最大深度
						max = Math.max(temp, max);
						
						//如果此节点仍然还是有子节点，那么继续进栈
						if (node.left != null) {
							stack.push(node.left);
							value.push(temp + 1);
						}
						if(node.right != null) {
							stack.push(node.right);
							value.push(temp + 1);
						}
					}
					return max;
				}
			}
		
		
		2.2 BFS：广度优先搜索
			public class Solution {
				public int maxDepth(TreeNode root) {
					if(root == null) {
						return 0;
					}
					//广度使用队列
					Queue<TreeNode> queue = new LinkedList<>();
					queue.offer(root);
					int count = 0;
					
					while (!queue.isEmpty()) {
						int size = queue.size();
						while(size-- > 0) {
							TreeNode node = queue.poll();
							if (node.left != null) {
								queue.offer(node.left);
							}
							if(node.right != null) {
								queue.offer(node.right);
							}
						}
						count++;
					}
					return count;
			}
		
		
		
		
		
		
Queue队列函数接口：	

offer      添加一个元素并返回true           如果队列已满，则返回false
poll       移除并返问队列头部的元素         如果队列为空，则返回null
	
add        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常
remove     移除并返回队列头部的元素         如果队列为空，则抛出一个NoSuchElementException异常
element    返回队列头部的元素               如果队列为空，则抛出一个NoSuchElementException异常
peek       返回队列头部的元素               如果队列为空，则返回null
put        添加一个元素                     如果队列满，  则阻塞
take       移除并返回队列头部的元素         如果队列为空，则阻塞

 

remove、element、offer 、poll、peek 其实是属于Queue接口。 		
		
		